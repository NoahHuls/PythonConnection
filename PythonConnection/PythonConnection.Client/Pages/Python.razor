@page "/python"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json

@inject HttpClient Http
@inject IJSRuntime JS

@rendermode InteractiveServer

<PageTitle>Python</PageTitle>

<h3>Python</h3>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p>@errorMessage</p>
}
@if (prediction is not null && prediction != 999)
{
    <p>Looks like you’ve drawn a @prediction</p>
}
else if (prediction == 999)
{
    <p>Looks like you’ve drawn a... well, let’s just call it 'creative expression'.</p>
}
<button class="btn btn-primary" @onclick="CallPythonMethod">Click me</button>

<br />
<br />

<canvas id="drawCanvas" width="28" height="28" style="border: 1px solid black; image-rendering: pixelated; width: 280px; height: 280px;"></canvas>
<br />
<button @onclick="ClearCanvas">Clear</button>

@code {
    private int? prediction;
    private string errorMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addCanvasListeners");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CallPythonMethod()
    {
        prediction = null;

        try
        {
            int[] pixelData = await GetPixelData();
            PredictionPayload payload = new PredictionPayload { image = pixelData };
            HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("http://localhost:5000/api/predict/number", payload);
            var response = await responseMessage.Content.ReadFromJsonAsync<PythonResponse>();
            prediction = response!.GetValue();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task ClearCanvas()
    {
        await JS.InvokeVoidAsync("clearCanvas");
    }

    private async Task<int[]> GetPixelData()
    {
        var pixelData = await JS.InvokeAsync<int[]>("getPixelData");
        Console.WriteLine($"Pixel Data: {string.Join(",", pixelData)}");
        return pixelData;
    }

    public sealed class PredictionPayload
    {
        public int[] image { get; set; } = [];
    }

    public sealed class PythonResponse
    {
        public string message { get; set; } = string.Empty;
        public object data { get; set; } = new();

        public int GetValue()
        {
            using (JsonDocument document = JsonDocument.Parse(data.ToString()))
            {
                // Access the root element (which is an object)
                JsonElement root = document.RootElement;

                // Get the value of the "number" property
                int numberFromJson = root.GetProperty("prediction").GetInt32();

                return numberFromJson;
            }
        }
    }
}