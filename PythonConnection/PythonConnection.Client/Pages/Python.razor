@page "/python"
@using System.Net.Http
@using System.Net.Http.Json

@inject HttpClient Http
@inject IJSRuntime JS

@rendermode InteractiveServer


<PageTitle>Python</PageTitle>

<h3>Python</h3>
@if (fromPython > 0)
{
    <p>Random nr from Python: @fromPython</p>
}
<button class="btn btn-primary" @onclick="CallPythonMethod">Click me</button>

<br />
<br />

<canvas id="drawCanvas" width="28" height="28" style="border: 1px solid black; image-rendering: pixelated; width: 280px; height: 280px;"></canvas>
<br />
<button @onclick="ClearCanvas">Clear</button>
<button @onclick="GetPixelData">Get Pixel Data</button>

@code {
    private int fromPython;
    private string errorMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addCanvasListeners");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CallPythonMethod()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PythonResponse>("http://localhost:5000/api/hello-world");
            fromPython = response!.random_number;
            errorMessage = string.Empty; // Clear any previous error messages
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task ClearCanvas()
    {
        await JS.InvokeVoidAsync("clearCanvas");
    }

    private async Task GetPixelData()
    {
        var pixelData = await JS.InvokeAsync<int[]>("getPixelData");
        Console.WriteLine($"Pixel Data: {string.Join(",", pixelData)}");
        // Further processing of pixel data can be done here
    }

    public sealed class PythonResponse
    {
        public string message { get; set; } = string.Empty;
        public int random_number { get; set; }
    }
}